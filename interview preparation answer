======================================================================================================
--------------------------------------VARIABLE & DATA TYPES ------------------------------------------
======================================================================================================

 1.	Explain local vs. global variables.

 Ans:-   Local Variables:         (i).Defined within a function or a block and can only be accessed within that function or block. 
                                  (ii). They are created when the function is called and destroyed when the function exits.
         Global Variables:        (i).Defined outside of all functions and can be accessed by any function within the same file (or other files if declared with extern).
                                  (ii). They exist for the entire duration of the program.
------------------------------------------------------------------------------------------------------------------------
2. What are static_cast and dynamic_cast?

Ans :-   Static Cast  :            (i) Static_cast is a casting operator which is used to convert data type of a variable into another data type .
                                   (ii). Syntax : static_cast<datatype>(variable_name);
                                   (iii).  Example :- int main() 
                                           {
                                            for(int i=65;i<=90;i++)
                                            {
                                                cout<<static_cast<char>(i);
                                                cout<<endl;
                                            }
                                            return 0;
                                            }

         Dynamic Cast :             (i). Dynamic_cast is a operator which converts data from one to another(int to float, int to double) etc.
                                    (ii). There should be always a virtual function in base class to acheive dynamic cast. 
                                    (iii). There should be polymorphic base class and Dynamic_cast works on RTTI(Run time type information);
                                     (iv)             class Base {
                                                      public:
                                                          virtual void print() {
                                                              cout << "base class function" << endl;
                                                          }
                                                      };
                                                      
                                                      class Derived : public Base {
                                                      public:
                                                          int a = 6;
                                                          
                                                          void printff() {
                                                              cout << "derived class function" << endl;
                                                          }
                                                      };
                                                      
                                                      int main() {
                                                          Base *baseptr = new Derived(); // Create an instance of  Derived
                                                          Derived *derptr = dynamic_cast<Derived*>(baseptr); //Safe downcast
                                                      
                                                          if (derptr) { // Check if the cast was successful
                                                              derptr->print();    // Call the base class function
                                                              derptr->printff();  // Call the derived class  function
                                                          } else {
                                                              cout << "Cast failed!" << endl; // Handle unsuccessful cast
                                                          }
                                                      
                                                          delete baseptr; // Clean up
                                                          return 0;
                                                      }
                                                      

                                                   int main() {
                                                    Base *baseptr = new Derived(); // Create an instance of Derived
                                                   Derived *derptr = dynamic_cast<Derived*>(baseptr); // Safe downcast

                                                    if (derptr) { // Check if the cast was successful
                                                    derptr->print();    // Call the base class function
                                                    derptr->printff();  // Call the derived class function
                                                    } else {
                                                   cout << "Cast failed!" << endl; // Handle unsuccessful cast
                                                   }

                                                   delete baseptr; // Clean up
                                                      return 0;
                                                    }

-----------------------------------------------------------------------------------
3. What are the differences between stack and heap memory allocation in terms of variables?

Ans :- STACK :- 
                 (i). Memory is managed automatically.
                 (ii).Variables are created when a function is called and destroyed when the function returns.
                 (iii)..Generally has a smaller size limit (usually in the range of a few megabytes).
                 (iv).Faster access because of its LIFO structure and locality in memory.
       QUEUE :-
                  (i).Memory is managed manually by the programmer using new and delete.
                  (ii).Variables exist until they are explicitly deleted.
                  (iii).Typically larger and can grow as needed, limited mainly by system memory.
                   (iv).Slower access due to the overhead of dynamic memory management.

---------------------------------------------------------------------------------------
4.What happens if you try to use a variable before it is initialized?

Ans :- unpredicatable behaviour, value of variable will be garbage. expample:
#include <iostream>
using namespace std;

int main()
{
    int arr[5]; // Uninitialized array
    for (int i = 0; i < 5; ++i) {
        cout << arr[i]; // Undefined behavior: elements may hold garbage values
    }
    return 0;
}
--------------------------------------------------------------------------------------
5. What are the different storage classes in C++?

Ans :- (i)    Auto
       (ii).  Static
       (iii). Register
       (iv)   Extern



======================================================================================================================================
-------------------------------------------------OPERATORS---------------------------------------------------------------------------
======================================================================================================================================

1.	Explain the difference between == and = in C++.
Ans : (i). "==" is comparisonal operator and "=" is assignment operator.
      (ii). "==" compares two variable i.e they are equal or not. eg. (4==5) return 0.
      (iii) "=" assigns value to a variable. eg int a=5;

------------------------------------------------------------------------
2.How do comparison operators behave when applied to floating-point numbers? Can you give an example of potential pitfalls?
  Ans :-
 double a = (0.3 * 3) + 0.1;
	double b = 1;
	compare (a==b) // not equal.

 getting correct answer by fixing:
  if (abs(a - b) < 1e-9) {
        cout << "The numbers are equal "
             << endl;

----------------------------------------------------------------------------------------
3. Explain short-circuit evaluation in the context of logical operators
Ans :- example:
 (i). if(a>b && b>c&& c>d) :- if (a>b) is false, then remaining part(&& b>c&& c>d) of this condition  will not check and answer will be false.
 (ii). if(a>b || b>c|| c>d) :- if (a>b) is true, then remaining part(&& b>c&& c>d) of this condition  will not check and answer will be true.

--------------------------------------------------------------------------------------------
4.	How would you swap two variables using assignment operators without a temporary variable?
Ans . int main() {
   int a=5, b=10;
   a=a^b;
   b=a^b;
   a=a^b;
   
  cout<<"a is :"<<a<<endl<<"b is :"<<b;

    return 0;
}
-----------------------------------------------------------------------------------------
5. How would you use bitwise operators to check if a number is even or odd?

Ans . if (number & 1==1) , it is odd, otherwise(number & 1==0) will be even.

----------------------------------------------------------------------------------------
6. What is a ternary operator, and how does it work in C++?

Ans :- (i).Ternary operator is the shortest form of conditional statement . 
       (ii).it syntax is : datatype variable=(condition)?"True statement":"false statatement";
       (iii).int main() {
            string  result =5>2?"yes":"no";
            cout<<result;
            return 0;
             }

------------------------------------------------------------------------------------------
7.	Explain the fall-through behavior of the switch statement with an example.

Ans :- If there is 'no' break keyword used in statement which is true, then it will execute  other statement also.
       Example:
#include <stdio.h>

int main() {
    int day = 3;

    switch (day) {
        case 1:
            printf("Monday\n");
            // No break, will fall through to case 2
        case 2:
            printf("Tuesday\n");
            // No break, will fall through to case 3
        case 3:
            printf("Wednesday\n");
            // No break, will fall through to case 4
        case 4:
            printf("Thursday\n");
            break; // Breaks out of the switch
        case 5:
            printf("Friday\n");
            break; // This will not be executed
        default:
            printf("Invalid day\n");
    }

    return 0;
}
-----------------------------------------------------------------------------------------
8.	Discuss a scenario where using a ternary operator would be preferred over if-else for conciseness. Provide an example.

Ans. (i) The ternary operator is often preferred over if-else statements when you want to assign a value based on a simple condition.
    (ii).The ternary operator reduces the amount of code you need to write.



================================================================================================
------------------------------------FUNCTIONS--------------------------------------------------
================================================================================================
1.	What is an inline function, and how does it differ from a regular function?
Ans:-
Inline function is a function which is expanded in line when it is called.When the inline function is called whole code
of the inline function gets inserted or substituted at the point of the inline function call.Remember, inlining is only
a request to the compiler, not a command. The compiler can ignore the request for inlining. 
BENEFIT :- Faster execution
DISADVANTAGE :-more binary size, cannot use for recursive(result will be infinite loop)
Example:
inline int square(int x) {
    return x * x;
}

int main() {
    int result = square(5); // Compiler may replace this with `result = 5 * 5;`
}
----------------------------------------------------------------------------------------------------------
2. Under what circumstances might the compiler ignore the inline request?
Ans:- 
(i) Recursive function
(ii) Function with pointer parameter .eg.func(int *ram)
(iii) function complex

------------------------------------------------------------------------------------------------
3.	How would you design an inline function for calculating the area of a rectangle?
Ans:-
#include <iostream>

// Inline function to calculate the area of a rectangle
inline double areaOfRectangle(double length, double width) {
    return length * width;
}

int main() {
    double length = 5.0;
    double width = 3.0;
    
    double area = areaOfRectangle(length, width);
    std::cout << "Area of the rectangle: " << area << std::endl;

    return 0;
}


================================================================================================
=------------                         ARRAY                                           ---------=
================================================================================================

1. Rotate an Array ‘n’ time 
Ans :-

#include <iostream>
#include <algorithm>
using namespace std;

int main() {
int arr[]={1,2,3,4,5},size=sizeof(arr)/sizeof(arr[0]),rotation_time;
cout<<"Enter the number of time to rotate an array :";
cin>>rotation_time;

rotation_time%=size;
reverse(arr,arr+rotation_time);
reverse(arr+rotation_time,arr+size);
reverse(arr,arr+size);

//printing element
for(int i:arr)
cout<<i<<" ";

    return 0;
}
------------------------------------------------------------------
2. Search element in Array
Ans :-// Online C++ compiler to run C++ program online
#include <iostream>
#include <algorithm>
using namespace std;

int main() {
int arr[]={1,2,3,4,5},size=sizeof(arr)/sizeof(arr[0]),element;
bool flag=false;
cout<<"Enter the element to search in array :";
cin>>element;
for(int i=0;i<size;i++)
{
    if(arr[i]==element)
    {
        cout<<"element is found";
        flag=true;
    }
}
if(!flag)
{
    cout<<"element not found";
    
}
  return 0;
}

-------------------------------------------------------------------------------------
3.Remove duplicates from an Array .
Ans:-
#include <iostream>
#include <unordered_set>
using namespace std;

int main() {
    int arr[] = {1, 2, 3, 2, 4, 5, 5, 1};
    int size = sizeof(arr) / sizeof(arr[0]);

    // Use an unordered set to eliminate duplicates
    unordered_set<int> myset(arr, arr + size);

    // Print unique elements directly from the unordered set
    for (const int& i : myset) {
        cout << i << " ";
    }

    cout << endl; // Add a newline for better output format

    return 0;
}

-------------------------------------------------------------------------
4. Merge two sorted Array :-
Ans :-
#include <iostream>
using namespace std;

int main() {
    int arr1[] = {1, 4, 7, 9, 12, 18, 34};
    int arr2[] = {2, 5, 9, 16, 19, 26};
    int size1 = sizeof(arr1) / sizeof(arr1[0]);
    int size2 = sizeof(arr2) / sizeof(arr2[0]);
    int temp[size1 + size2];
    int index = 0, i = 0, j = 0;

    while (i < size1 && j < size2) {
        if (arr1[i] <= arr2[j]) {
            temp[index] = arr1[i];
            i++;
        } else {
            temp[index] = arr2[j];
            j++;
        }
        index++;
    }

    while (i < size1) {
        temp[index] = arr1[i];
        i++;
        index++;
    }

    while (j < size2) {
        temp[index] = arr2[j];
        j++;
        index++;
    }

    // Print the merged array
    for (int k = 0; k < size1 + size2; k++) {
        cout << temp[k] << " ";
    }
    
    return 0;
}
------------------------------------------------------------------------
5.	Two Sum Problem 
Ans :-#include <iostream>
#include <algorithm> // For std::sort
using namespace std;

int main() {
    int arr[] = {1, 6, 9, 2, 2, 3, 5, 6, 8};
    int size = sizeof(arr) / sizeof(arr[0]);
    int target = 20;
    
    // Sort the array
    sort(arr, arr + size);

    int start = 0, end = size - 1;
    bool flag = false;

    while (start < end) {
        int sum = arr[start] + arr[end];

        if (sum == target) {
            cout << "Element found at indices: " << start << " & " << end << endl;
            flag = true;
            break;
        } else if (sum > target) {
            end--;
        } else {
            start++;
        }
    }

    if (!flag) {
        cout << "No elements found that sum to " << target << endl;
    }

    return 0;
}
-------------------------------------------------------------------------------
6.	Find the Missing Number in array .
Ans :-
#include <iostream>
#include <numeric>
using namespace std;

int main() {
    int arr[] = {1, 2, 3, 4, 6, 7, 8, 9};
    int size = sizeof(arr) / sizeof(arr[0]);
    
    // Calculate the actual sum of the array
    int arr_sum = accumulate(arr, arr + size, 0);
    
    // Calculate the expected sum from 1 to max number in the array
    int max_num = size+1; // You can also determine this dynamically if needed
    int expected_sum = (max_num * (max_num + 1)) / 2;
    
    // Find the missing number
    int missingNum = expected_sum - arr_sum;
    
    cout << "Missing number is: " << missingNum << endl;

    return 0;
}

------------------------------------------------------------------
7.	Longest Increasing Subsequence in Array 
Ans:-
// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;

int main() {
    // Write C++ code here
    int arr[]={10,9,2,5,3,7,101,18},size=sizeof(arr)/sizeof(arr[0]),count=1,max_len=1;
    for(int i=0;i<size-1;i++)
    {
         count=1;
        for(int j=i+1;j<size;j++)
        {
          if(arr[i]<arr[j])
          {
              
              count++;
              arr[i]=arr[j];
              max_len=max(max_len,count);
          }
        }
      
       
    }
    cout<<max_len;

    return 0;
}

------------------------------------------------------------------
8.	Kth Largest Element in c++
Ans:-
// Online C++ compiler to run C++ program online
#include <iostream>
#include<algorithm>
using namespace std;

int main() {
    // Write C++ code here
    int arr[]={10,9,2,5,3,7,101,18},size=sizeof(arr)/sizeof(arr[0]),nthnum=1;
    sort(arr,arr+size,greater<int>());
    cout<<nthnum<<" largest num is :"<<arr[nthnum-1];


    return 0;
}

-----------------------------------------------------------------------
 9.	maximum sum subarray
Ans:- // Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;

int main() {
    // Write C++ code here
int arr[]={5,4,-1,7,8};
int size=sizeof(arr)/sizeof(arr[0]);
int maxSum=0,curSum=0,start=0,end=0;
for(int i=0;i<size;i++)
{
    curSum+=arr[i];
    if(curSum>maxSum)
    {
        end=i;
        maxSum=curSum;
        
    }
    if(curSum<0)
    {
        start=i+1;
        curSum=0;
    }
}
cout<<maxSum<<" "<<start<<" "<<end;

    return 0;
}
-----------------------------------------------------------
10. What is Static Array & Dynamic Array?
Ans:-
Static Arrays:-
(i)Memory Allocation: Allocated at compile time.
(ii)Size: Fixed; cannot be resized after declaration.
(iii).example: int arr[10]; 

Dynamic Arrays:
(i)Memory Allocation: Allocated at run time using new operator.
(ii)Size:can be resized after declaration.
(iii).example: int *arr=new int[size];
(iv) . delete operator is very important to deallocate the memory for dynamic array.


------------------------------------------------------------------------
11.	Sort an array of 0 & 1 & 2element
Ans.// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;

int main() {
    // Write C++ code here
int arr[]={2, 0, 1, 2, 0, 1, 0};
int size=sizeof(arr)/sizeof(arr[0]);
int zero=0,two=size-1;
for(int i=0;i<size;i++)
{
  if(arr[i]==0)
  {
      swap(arr[i],arr[zero]);
      zero++;
  }
  else if(arr[i]==2)
  {
      swap(arr[two],arr[i]);
       two--;
       i--;
  }
}
for(int i:arr)
cout<<i<<" ";

    return 0;
}
------------------------------------------------------------------
12.	Find the minimum element in a rotated sorted array.
Ans :-
// Online C++ compiler to run C++ program online
#include <iostream>
#include<algorithm>
using namespace std;

int main() {
    // Write C++ code here
int arr[]={4, 5, 6, 7, 0, 1, 2};
int size=sizeof(arr)/sizeof(arr[0]);

int *minn=min_element(arr,arr+size);
cout<<"minimum element is :"<<*minn;


    return 0;
}

----------------------------------------------------------------
13.	Check if any value appears at least twice in the array.
Ans:-
#include <iostream>
#include <unordered_map>
using namespace std;

int main() {
    int arr[] = {4, 5, 6, 7, 0, 1, 2, 1, 4, 2};
    int size = sizeof(arr) / sizeof(arr[0]);
    unordered_map<int, int> ump;

    // Count occurrences of each element
    for (int i = 0; i < size; i++) {
        ump[arr[i]]++;
    }

    // Print elements that appear more than once
    cout << "Duplicate elements: ";
    bool found = false; // Flag to check if any duplicates were found
    for (const auto& pair : ump) {
        if (pair.second > 1) {
            cout << pair.first << " ";
            found = true;
        }
    }

    if (!found) {
        cout << "No duplicates found.";
    }

    cout << endl; // New line for better output formatting
    return 0;
}
---------------------------------------------------------------------------------
15.     Can you explain the difference between sizeof(arr) and sizeof(*arr) when dealing with arrays?
Ans:-
(i).sizeof(arr):- complete array size will be print;
(ii).sizeof(*arr) :- only first element size print.
(iii).
int arr[]={4, 5, 6};
cout<<"sizeof(arr) :"<<sizeof(arr)<<endl; // print 12
cout<<"sizeof(*arr) :"<<sizeof(*arr);// print 4

---------------------------------------------------------------------
16.     What happens if you try to access an element outside the bounds of an array?
Ans :-
element will be found but with garbage value;

-----------------------------------------------------------------
17.  How can you copy an array in C++?
Ans:-
(i). Using for loop 
(ii)Using copy function, Example below:
#include <iostream>
#include<algorithm>
using namespace std;

int main() {
    // Write C++ code here
int arr[]={4, 5, 6,12,34,56};
int size=sizeof(arr)/sizeof(arr[0]);

int temp[size];
copy(arr, arr+size,temp);
for(int i:temp)
cout<<i<<" ";
return 0;
}
=====================================================================
=----------               REFERENCE             --------------------=
=====================================================================

3.	What is a reference to a pointer? How is it different from a reference to an object?
Ans:-
A reference to a pointer is a reference which points to  pointer and can change the pointer value directly.E.g
#include <iostream>
int main() {
    // Write C++ code here
    int var=10;
    int *ptr=&var;
    int *&reftoptr=ptr;
     *reftoptr=50;
    std::cout<<var;

    return 0;
}









