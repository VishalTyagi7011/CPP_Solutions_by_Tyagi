----------------------------------------------------------------------------------------
  Find the longest word in a sentence .
----------------------------------------------------------------------------------------

#include <iostream>
std::string LongestSubString(std:: string str)
{
    std::string ans="";
    int len=str.length(),left=0,maxlen=0,count=0;

 for(int i=0;i<=len;++i)
    {
        if(str[i]==' ' or i==len)
        {
            if(i-left >maxlen)
            {
                maxlen=i-left;
                ans=str.substr(left,maxlen+1);
                count++;
                
            }
            left=i+1;
        }
    }

    return ans;
}

int main()
{
    std::cout<<LongestSubString("my name is vishal");

    return 0;
}



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
----------------------------------------------------------------------------
 Check string is palindrome or not 
-----------------------------------------------------------------------------
/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>

bool IsPalindrome(std::string str)
{
    int len=str.length();
    for(int i=0;i<len/2;i++)
    {
        if(str[i]!=str[len-1-i])
        {
            return false;
        }
    }
    return true;
}

int main()
{
    std::string str;
    std::cout<<"Enter the string :";
    getline(std::cin,str);
    if(IsPalindrome(str))
    {
        std::cout<<"string is palindrome";
    }
    else
    {
        std::cout<<"string is not palindrome";
    }

    return 0;
}


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-------------------------------------------------------
Remove Duplicates from Array
--------------------------------------------------------



#include <iostream>
#include<unordered_set>

void RemoveDuplicate(int arr[],int len)
{
    std::unordered_set<int>myset(arr,arr+len);

    int count=0;
    for(int i: myset)
    {
      arr[count++]=i;  
    }
    for(int i=count;i<len;i++)
    {
        arr[i]=-1;
    }
    
    for(int i=0;i<len;i++)
    {
        std::cout<<arr[i]<<" ";
    }
}

int main()
{
    int arr[]={1,2,3,4,4,3,5,6,8,7,2,4,0},size=sizeof(arr)/sizeof(arr[0]);
    RemoveDuplicate(arr,size);

    return 0;
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-----------------------------------------------------------------------
Reverse the string
-----------------------------------------------------------------------


#include <iostream>

std::string ReverseString(std::string str)
{
    int len=str.length();
    for(int i=0;i<len/2;++i)
    {
        char temp=str[i];
        str[i]=str[len-1-i];
        str[len-1-i]=temp;
    }
    return str;
}

int main()
{
    std::cout<<ReverseString("my name is vishal");

    return 0;
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
------------------------------------------------------------
 Find the count maximum consecutive of 1's in an array
------------------------------------------------------------


#include <iostream>

int maxConsecutive(int arr[],int len)
{
    int ans=0,count=0;
    for(int i=0;i<len;i++)
    {
        if(arr[i]==1)
        {
            count++;
            if(count>ans)
            {
                ans=count;
            }
        }
        else
        {
            count=0;
        }
    }
    return ans;
}

int main()
{
    int arr[] = {1, 1, 0, 1, 1, 1, 0, 1, 1,1,1},len=sizeof(arr)/sizeof(arr[0]);
    std::cout<<maxConsecutive(arr,len);

    return 0;
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
---------------------------------------------------------------
calculate factorial of a number 
---------------------------------------------------------------

#include <iostream>

int Factorial(int num)
{
   if(num==1 || num==0)
   return 1;
   
return num*Factorial(num-1);
}

int main()
{
    std::cout<<Factorial(5);

    return 0;
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-----------------------------------------------------------
merge two sorted array 
-----------------------------------------------------------


#include <iostream>

void MergeSortedArray(int arr1[],int len1, int arr2[],int len2)
{
    int totalLen=len1+len2,left=0,right=0;
    int ans[totalLen];
    for(int i=0;i<totalLen;i++)
    {
        if(left==len1)
        {
          ans[i]=arr2[right];
          right++;
        }
        else if(right==len2)
        {
          ans[i]=arr1[left];
          left++;
        }
        
       else if(arr1[left]<=arr2[right])
       {
           ans[i]=arr1[left];
           left++;
       }
       else
       {
           ans[i]=arr2[right];
           right++;
       }
       
       std::cout<<ans[i]<<" ";
    }

}

int main()
{
    int arr1[]={5,6,7,12,34,67,90} ,  len1=sizeof(arr1)/sizeof(arr1[0]), arr2[]={0,2,3,3,4,4,6,30},len2=sizeof(arr2)/sizeof(arr2[0]);
    MergeSortedArray(arr1,len1,arr2,len2);
    return 0;
}


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--------------------------------------------------------------








